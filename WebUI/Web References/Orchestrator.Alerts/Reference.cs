//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.1433.
// 
#pragma warning disable 1591

namespace Orchestrator.WebUI.Alerts {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="EmailSoap", Namespace="http://alert.services.orchestrator.co.uk/")]
    public partial class Email : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback SendSupportEmailOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendEmailOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendEmailWithFromDetailsOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Email() {
            this.Url = global::Orchestrator.WebUI.Properties.Settings.Default.WebUI_Orchestrator_Alerts_Email;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event SendSupportEmailCompletedEventHandler SendSupportEmailCompleted;
        
        /// <remarks/>
        public event SendEmailCompletedEventHandler SendEmailCompleted;
        
        /// <remarks/>
        public event SendEmailWithFromDetailsCompletedEventHandler SendEmailWithFromDetailsCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://alert.services.orchestrator.co.uk/SendSupportEmail", RequestNamespace="http://alert.services.orchestrator.co.uk/", ResponseNamespace="http://alert.services.orchestrator.co.uk/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SendSupportEmail(string subject, string message, string source) {
            this.Invoke("SendSupportEmail", new object[] {
                        subject,
                        message,
                        source});
        }
        
        /// <remarks/>
        public void SendSupportEmailAsync(string subject, string message, string source) {
            this.SendSupportEmailAsync(subject, message, source, null);
        }
        
        /// <remarks/>
        public void SendSupportEmailAsync(string subject, string message, string source, object userState) {
            if ((this.SendSupportEmailOperationCompleted == null)) {
                this.SendSupportEmailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendSupportEmailOperationCompleted);
            }
            this.InvokeAsync("SendSupportEmail", new object[] {
                        subject,
                        message,
                        source}, this.SendSupportEmailOperationCompleted, userState);
        }
        
        private void OnSendSupportEmailOperationCompleted(object arg) {
            if ((this.SendSupportEmailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendSupportEmailCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://alert.services.orchestrator.co.uk/SendEmail", RequestNamespace="http://alert.services.orchestrator.co.uk/", ResponseNamespace="http://alert.services.orchestrator.co.uk/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SendEmail(string subject, string message, string recipient, string recipientAddress) {
            this.Invoke("SendEmail", new object[] {
                        subject,
                        message,
                        recipient,
                        recipientAddress});
        }
        
        /// <remarks/>
        public void SendEmailAsync(string subject, string message, string recipient, string recipientAddress) {
            this.SendEmailAsync(subject, message, recipient, recipientAddress, null);
        }
        
        /// <remarks/>
        public void SendEmailAsync(string subject, string message, string recipient, string recipientAddress, object userState) {
            if ((this.SendEmailOperationCompleted == null)) {
                this.SendEmailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendEmailOperationCompleted);
            }
            this.InvokeAsync("SendEmail", new object[] {
                        subject,
                        message,
                        recipient,
                        recipientAddress}, this.SendEmailOperationCompleted, userState);
        }
        
        private void OnSendEmailOperationCompleted(object arg) {
            if ((this.SendEmailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendEmailCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://alert.services.orchestrator.co.uk/SendEmailWithFromDetails", RequestNamespace="http://alert.services.orchestrator.co.uk/", ResponseNamespace="http://alert.services.orchestrator.co.uk/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SendEmailWithFromDetails(string fromName, string fromEmailAddress, string subject, string message, string recipient, string recipientAddress) {
            object[] results = this.Invoke("SendEmailWithFromDetails", new object[] {
                        fromName,
                        fromEmailAddress,
                        subject,
                        message,
                        recipient,
                        recipientAddress});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SendEmailWithFromDetailsAsync(string fromName, string fromEmailAddress, string subject, string message, string recipient, string recipientAddress) {
            this.SendEmailWithFromDetailsAsync(fromName, fromEmailAddress, subject, message, recipient, recipientAddress, null);
        }
        
        /// <remarks/>
        public void SendEmailWithFromDetailsAsync(string fromName, string fromEmailAddress, string subject, string message, string recipient, string recipientAddress, object userState) {
            if ((this.SendEmailWithFromDetailsOperationCompleted == null)) {
                this.SendEmailWithFromDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendEmailWithFromDetailsOperationCompleted);
            }
            this.InvokeAsync("SendEmailWithFromDetails", new object[] {
                        fromName,
                        fromEmailAddress,
                        subject,
                        message,
                        recipient,
                        recipientAddress}, this.SendEmailWithFromDetailsOperationCompleted, userState);
        }
        
        private void OnSendEmailWithFromDetailsOperationCompleted(object arg) {
            if ((this.SendEmailWithFromDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendEmailWithFromDetailsCompleted(this, new SendEmailWithFromDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void SendSupportEmailCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void SendEmailCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void SendEmailWithFromDetailsCompletedEventHandler(object sender, SendEmailWithFromDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendEmailWithFromDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendEmailWithFromDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591